05/27/24
JavaScript Tutorial Full Course - Beginner to Pro (2024)
https://www.youtube.com/watch?v=EerdGm-ehJQ

Type Coersion = Adding number to a string converts all to a string

'$' + 20.95 = '$20.95'
'$' + (20.95 + 7.99)
<- '$28.93999999999998'

Escape Chars:  \'  \"  \n

Template Strings use back-ticks

Interpolation

`items (${1 + 1}): $${(2095 + 799) / 100}`

Multi-Line Strings

`line1
line2
line3`   => 'line1\nline2\nline3'

Use 'str' by default
If you need interpolation or multi-line use back-tick

6/14/24

Finished watching all of HTML / CSS class to reproduce the Youtube website

6/16/24

Continuing with Javascript video chapter 7 Functions 3:34:12
https://www.youtube.com/watch?v=EerdGm-ehJQ

return; returns undefined

Multiline Strings
In JavaScript the extra spaces show on the screen
In HTML they are replaced with one space

dot notation
product.name
product.delivery-time    -> Does not work.  Tries to do subtraction
product['delivery-time'] -> Must be used in this case


bracket notation
product['name']


Auto-Boxing - String has properties like length and methods like .ToUpperCase()
Numbers:  3.0.toString()
Boolean: true.toString()
Not Allowed: null.property
Not Allowed: undefined.method()

Objects are references.  The object is in memory.  object1 gets a reference to the object.

const object1 = {
  message: 'hello'
};

Copy by reference 
const object2 = object1;  //Both point to same object
object1.message = 'Good Job!';  //Can do this because object1 is not changed

Can't compare objects directly
console.log(object3 === object1)  //Not equal if references are different 
                                  //Does not compare members

Destructuring Shortcut:
 - Easier way to take properties out of an object:

const object4 = {
  message: 'Good job!',
  price: 799
};

//const message = object4.message;
const { message, price } = object4;


Shorthand Property:

const object5 = {
  //message: message
  message //short hand if variable name is same as object property
};
console.log(object5);

Shorthand Method:

const object5 = {
  //message: message
  message //short hand if variable name is same as object property
  
//  method: function function1() {
//    console.log('method');

  method() {
    console.log('method');
};
console.log(object5);
object5.method();

Document Object Model (DOM)

Models the web page

DOM links together the JavaScript and the HTML
Gives JavaScript full control of the web page

document.querySelector()
Lets us put any element inside JavaScript

.innerText > Eliminates spaces so comparisons work

Move the HTML code to a method

For input elements use .value

Type Coersion

let cost = Number(inputElement.value);

onkeydown attribute

Every event listener gets an event object

Type Coersion
  Works for -, *, /
console.log('25' - 5 );

Always do math using numbers

Window is the browser
Document is the page

7/4/24
// First set command line to ~/Documents/repos folder
// Next command will create a ~/Documents/repos/javascript-course folder
// with a single .git folder inside and pull down all the code

git clone https://github.com/SuperSimpleDev/javascript-course.git
cd javascript-course
git status
> On branch main
> Branch up to date with origin/main
> Untracked files listed

Create a New Repository on GitHub:
Go to your GitHub account and create a new repository. Do not initialize it with a README, .gitignore, or license file as it may cause conflicts.

// This sets the 'origin' URL for your repository on Github
git remote set-url origin https://github.com/matadyshak/javascript-course.git
// Or whatever the current branch is
git push -u origin main 

After running these commands, your cloned repository will be uploaded to your own GitHub account.

After starting a new-branch locally enter this
git push -u origin new-branch

Then push / pull commands with be to/from new-branch

///////////////////////////////////////////////////////////////////////////////////
// Starting the exercises
///////////////////////////////////////////////////////////////////////////////////

7/7/24

This document requires 'TrustedHTML' assignment.

Get this error if at www.google.com and assigning document.body.innerHTML

Go to supersimple.dev/js-basics to enter commands into console

and there is no error


Amazon project is found at:
https://supersimple.dev/projects/amazon

/////////////////////////////////////////////////////////////////////

const fruits = ["apple", "orange", "cherry"];

// Example 1: Calls a function for each element in the array
fruits.forEach((currentValue, index, arr) => {
    console.log(`Element at index ${index}: ${currentValue}`);
});

// Example 2: Compute the sum of an array
const numbers = [65, 44, 12, 4];
let sum = 0;
numbers.forEach((item) => {
    sum += item;
});
console.log(`Sum of numbers: ${sum}`);

// Example 3: Multiply each element by 10
numbers.forEach((item, index, arr) => {
    arr[index] = item * 10;
});

/////////////////////////////////////////////////////////////////////

7/27/24

<!-- Editor keeps indenting lines below <button> by 4 instead of 2 -->
<!-- Editor keeps indenting lines below console.log() by 2 instead of 0 -->
<!-- Fix this by disabling Detect Indentation and set Editor Tab Size to 2-->

/////////////////////////////////////////////////////////////////////

OPERATOR PRECEDENCE
Certainly! JavaScript has 21 levels of operator precedence. Letâ€™s explore them:

1. Grouping (Parentheses): Highest precedence. Use parentheses to control evaluation order.

2. Exponentiation (**): Right-associative.

3. Unary Operators: Including +, -, !, typeof, etc.

4. Multiplication and Division (*, /, %): Left-associative.

5. Addition and Subtraction (+, -): Left-associative.

6. Bitwise Shifts (<<, >>, >>>): Left-associative.

7. Relational Operators (<, >, <=, >=, instanceof, in): Left-associative.

8. Equality Operators (==, !=, ===, !==): Left-associative.

9. Bitwise AND (&): Left-associative.

10. Bitwise XOR (^): Left-associative.

11. Bitwise OR (|): Left-associative.

12. Logical AND (&&): Left-associative.

13. Logical OR (||): Left-associative.

14. Conditional (Ternary) Operator (? :): Right-associative.

15. Assignment Operators (=, +=, -=): Right-associative.

16. Comma Operator (a, b): Left-associative (evaluates both operands).

17. Spread/Rest Operators (...)

18. Yield and yield*

19. Arrow Function (=>): Right-associative.

20. Template Literals (${})

/////////////////////////////////////////////////////////////////////

7/29/24

localStorage

Only supports strings

// Get a single string from localStorage
const message = localStorage.getItem('message');

// save a single string in localStorage
localStorage.setItem('message', "Hello");


// Get strings from localStorage and convert strings to object score
// If item does not exist in localStorage it returns a NULL
let score = JSON.parse(localStorage.getItem('score')) || {
  wins: 0,
  losses: 0,
  ties: 0
};

// convert object score to strings and save in localStorage
localStorage.setItem('score', JSON.stringify(score));

//To reset the score and remove stored data in localStorage
localStorage.removeItem('score');


/////////////////////////////////////////////////////////////////////
8/6/24

For Go Live to work the HTML file must be selected.
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
8/18/24

Link to completed Amazon project:

https://supersimple.dev/projects/amazon/

Startup code for Lesson 13:
https://github.com/SuperSimpleDev/javascript-amazon-project

Will watch the videos and make same changes to lesson13 code
Then copy all code to Lesson 14 folder and continue

/////////////////////////////////////////////////////////////////////

EilifGit24!
Don't have to type window.
lucidchart.com
get.otter.com

/////////////////////////////////////////////////////////////////////
8/19/24
/////////////////////////////////////////////////////////////////////

Syntax for a data attribute

-is an HTML attribute
-Must start with "data-"

console.log(button.dataset);
dataset contains all data attributes that have been set for an element

/////////////////////////////////////////////////////////////////////
8/23/24
/////////////////////////////////////////////////////////////////////

// Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "type": "chrome",
      "request": "attach",
      "name": "Attach to Chrome with debugging",
      "url": "http://localhost:5500",
      "webRoot": "${workspaceFolder}",
      "runtimeExecutable": "C:\\Program Files\\Google\\Chrome\\Application\\Chrome.exe",
      "runtimeArgs": [
        "--remote-debugging-port=9222",
        "--new-window"
      ]
      },
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome with debugging",
      "url": "http://localhost:5500",
      "webRoot": "${workspaceFolder}",
      "runtimeExecutable": "C:\\Program Files\\Google\\Chrome\\Application\\Chrome.exe",
      "runtimeArgs": [
        "--remote-debugging-port=9222",
        "--new-window"
      ]
    }
  ]
}

Also set port number for Live Server to 5500 in VSCode settings
  "liveServer.settings.port": 5500
runtimeExecutable, runtimeArgs are not currently allowed

Browser opens with localhost:5500 The site cannot be reached

Running Live Server without trying to debug brings up 127.0.0.1:5500/amazon.html

"url": "http://localhost:5500",

Change to:
"url": "127.0.0.1:5500/amazon.html" => Get about:blank

Installed vscode-icons

Try       "url": "http://localhost:5500/amazon.html",

Now the program runs and displays the web page and breakpoints 

const selectElement = ...

Using Launch Chrome with Debugging
Step Over, Step Into and Step Out are greyed out => Need to be at a breakpoint
Stop and Restart work

/////////////////////////////////////////////////////////////////////
// 08/24/2024
/////////////////////////////////////////////////////////////////////

    <div class="product-quantity-container js-quantity-selector-${product.id}>
    <div class="product-quantity-container js-quantity-selector-${product.id}">

main branch cannot attach debugger

Message: Cannot connect to the target at localhost:0: Could not connect to debug target at http://localhost:0:.  Could not find any debuggable target.

"liveServer.settings.port": 5500,

Shows in call stack "localhost:5500/amazon.html"
There is no http://

Switch to 13-exercises branch
Attach to Chrome fails to connect
Made startup for chrome with "--remote-debugging-port=9222"

Found that launch.json should have "port": 9222,
Added that and attach times out with "localhost:9222"
Changed to "port": 5500 and attach times out with "localhost:5500"

/////////////////////////////////////////////////////////////////////
// 08/25/2024
/////////////////////////////////////////////////////////////////////

Setup Chrome icon with port 9222 option
Disable Live Server and try to debug attach

Here is what I have currently:

{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "type": "chrome",
      "request": "attach",
      "name": "Attach to Chrome with debugging",
      "port": 5500,
      "url": "http://localhost:5500/amazon.html",
      "webRoot": "${workspaceFolder}"
    },
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome with debugging",
      "port": 5500,
      "url": "http://localhost:5500/amazon.html",
      "webRoot": "${workspaceFolder}"
    }
  ]
}

Trying this next with Live Server disabled

{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Attach to Chrome with debugging",
      "type": "chrome",
      "request": "attach",
      "port": 9222,
      "url": "http://localhost:9222/amazon.html",
      "webRoot": "${workspaceFolder}"
    },
    {
      "name": "Launch Chrome with debugging",
      "type": "chrome",
      "request": "launch",
      "port": 9222,
      "url": "http://localhost:9222/amazon.html",
      "webRoot": "${workspaceFolder}"
    }
  ]
}

=> Timeout.  Chrome does not display anything.  Endless loop waiting.  No server.

Disable the Debugging Chrome attachment
Live Server still runs while disabled
Uninstall live server
Still Live Server runs!
Shut down VS code
Now Live Server is gone
Run without debugging gets timeout msg http://localhost:9222

change http://localhost:9222/amazon.html
to change http://localhost/amazon.html

Nothing happens.
Try starting Chrome first
Nothing

uninstall Debugger for Chrome
Chrome does not respond 

Change to this
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "type": "chrome",
      "request": "attach",
      "name": "Attach to Chrome with debugging",
      "port": 5500,
      "url": "http://localhost:5500/amazon.html",
      "webRoot": "${workspaceFolder}"
    },
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome with debugging",
      "port": 5500,
      "url": "http://localhost:5500/amazon.html",
      "webRoot": "${workspaceFolder}"
    }
  ]
}

Program runs using Open in Live Server
Attach debug fails localhost:5500
Launch without live Server fails.  http://localhost:5500/amazon.html 
No webpage was found

take url out of attach
set port to 9222 for attach => Works
Try launch => works and hits a breakpoint


//////////////////////////////////////////////////////////////////////////
FINAL VERSION WORKING WITH LIVE SERVER AND ATTACH OR LAUNCH
//////////////////////////////////////////////////////////////////////////
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "type": "chrome",
      "request": "attach",
      "name": "Attach to Chrome with debugging",
      "port": 9222,
      "webRoot": "${workspaceFolder}"
    },
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome with debugging",
      "port": 9222,
      "url": "http://localhost:5500/amazon.html",
      "webRoot": "${workspaceFolder}"
    }
  ]
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
ALSO ATTACHES TO CHROME WITHOUT THE COMMAND LINE ARG FOR PORT 9222

BUT LAUNCH CHROME FAILS W/O LIVE SERVER WITH THIS ERROR

Could not read source map for chrome-error://chromewebdata/: 
Unexpected 503 response from chrome-error://chromewebdata/neterror.rollup.js.map: Unsupported protocol "chrome-error:"

If start live server and let program run then attach

If using Chrome shortcut with port 9222 attach works
If using Chrome shortcut without port 9222 attach fails

CONCLUSIONS

//////////////////////////////////////////////////////////////////////////
Start Chrome w/9222 first
Use Live Server
Don't use Debugger for Chrome extension (Uninstalled)
Use Attach debugger
For Launch debugger need away to specify port# to chrome
Added         "--new-window"
Chrome opens with a new tab.  Program loads into a 2nd new tab.
These are not complained about in the editor

"runtimeExecutable": "C:\\Program Files\\Google\\Chrome\\Application\\Chrome.exe",
"runtimeArgs": [
   "--remote-debugging-port=9222",
   "--new-window
   ]
//////////////////////////////////////////////////////////////////////////

Launch mode works as long as you click Go Live within the first 3 seconds or so
Two Chrome browsers are opening up with the amazon site
Try taking out --new-window from launch.json - No effect so put it back

Chrome opens showing "about:blank" for about three seconds then:
localhost:5500/amazon.html
And error message says This site cannot be reached.  localhost refused to connect.

There is no message about port 9222 failing so the command line args in launch.json
must be working.  I took the command line args out and debugging still works.

Could not read source map for chrome-error://chromewebdata/: Unexpected 503 response from chrome-error://chromewebdata/neterror.rollup.js.map: Unsupported protocol "chrome-error:"

Put command line args back into launch.json

Added liveServer.settings.NoBrowser": true to VSCode settings.  Now Live Server does
not open a window but debugger does.  

Tried adding task to start live server.  Opens a new instance of VS Code!

Take out the task.

Set Live Server parameters:
     
    "liveServer.settings.AdvanceCustomBrowserCmdLine": "chrome --incognito --headless --remote-debugging-port=9222",
    "liveServer.settings.host": "localhost"

Chrome does not open
Take out --incognito --headless

Now there is one Chrome window on localhost:5000/amazon.html

Starting Chrome first from shortcut w/o port 9222 still causes timeout

Added --incognito to Chrome shortcut.  Was making 2 windows since this was different.

Still shortcut opens new incognito tab with no URL.  Have to turn Live Server off then on to load website. took out incognito

Problem with the Chrome shortcut is that it has no URL