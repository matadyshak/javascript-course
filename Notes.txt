05/27/24
JavaScript Tutorial Full Course - Beginner to Pro (2024)
https://www.youtube.com/watch?v=EerdGm-ehJQ

Type Coersion = Adding number to a string converts all to a string

'$' + 20.95 = '$20.95'
'$' + (20.95 + 7.99)
<- '$28.93999999999998'

Escape Chars:  \'  \"  \n

Template Strings use back-ticks

Interpolation

`items (${1 + 1}): $${(2095 + 799) / 100}`

Multi-Line Strings

`line1
line2
line3`   => 'line1\nline2\nline3'

Use 'str' by default
If you need interpolation or multi-line use back-tick

6/14/24

Finished watching all of HTML / CSS class to reproduce the Youtube website

6/16/24

Continuing with Javascript video chapter 7 Functions 3:34:12
https://www.youtube.com/watch?v=EerdGm-ehJQ

return; returns undefined

Multiline Strings
In JavaScript the extra spaces show on the screen
In HTML they are replaced with one space

dot notation
product.name
product.delivery-time    -> Does not work.  Tries to do subtraction
product['delivery-time'] -> Must be used in this case


bracket notation
product['name']


Auto-Boxing - String has properties like length and methods like .ToUpperCase()
Numbers:  3.0.toString()
Boolean: true.toString()
Not Allowed: null.property
Not Allowed: undefined.method()

Objects are references.  The object is in memory.  object1 gets a reference to the object.

const object1 = {
  message: 'hello'
};

Copy by reference 
const object2 = object1;  //Both point to same object
object1.message = 'Good Job!';  //Can do this because object1 is not changed

Can't compare objects directly
console.log(object3 === object1)  //Not equal if references are different 
                                  //Does not compare members

Destructuring Shortcut:
 - Easier way to take properties out of an object:

const object4 = {
  message: 'Good job!',
  price: 799
};

//const message = object4.message;
const { message, price } = object4;


Shorthand Property:

const object5 = {
  //message: message
  message //short hand if variable name is same as object property
};
console.log(object5);

Shorthand Method:

const object5 = {
  //message: message
  message //short hand if variable name is same as object property
  
//  method: function function1() {
//    console.log('method');

  method() {
    console.log('method');
};
console.log(object5);
object5.method();

Document Object Model (DOM)

Models the web page

DOM links together the JavaScript and the HTML
Gives JavaScript full control of the web page

document.querySelector()
Lets us put any element inside JavaScript

.innerText > Eliminates spaces so comparisons work

Move the HTML code to a method

For input elements use .value

Type Coersion

let cost = Number(inputElement.value);

onkeydown attribute

Every event listener gets an event object

Type Coersion
  Works for -, *, /
console.log('25' - 5 );

Always do math using numbers

Window is the browser
Document is the page

7/4/24
// First set command line to ~/Documents/repos folder
// Next command will create a ~/Documents/repos/javascript-course folder
// with a single .git folder inside and pull down all the code

git clone https://github.com/SuperSimpleDev/javascript-course.git
cd javascript-course
git status
> On branch main
> Branch up to date with origin/main
> Untracked files listed

Create a New Repository on GitHub:
Go to your GitHub account and create a new repository. Do not initialize it with a README, .gitignore, or license file as it may cause conflicts.

// This sets the 'origin' URL for your repository on Github
git remote set-url origin https://github.com/matadyshak/javascript-course.git
// Or whatever the current branch is
git push -u origin main 

After running these commands, your cloned repository will be uploaded to your own GitHub account.

After starting a new-branch locally enter this
git push -u origin new-branch

Then push / pull commands with be to/from new-branch

///////////////////////////////////////////////////////////////////////////////////
// Starting the exercises
///////////////////////////////////////////////////////////////////////////////////

7/7/24

This document requires 'TrustedHTML' assignment.

Get this error if at www.google.com and assigning document.body.innerHTML

Go to supersimple.dev/js-basics to enter commands into console

and there is no error


Amazon project is found at:
https://supersimple.dev/projects/amazon

/////////////////////////////////////////////////////////////////////

const fruits = ["apple", "orange", "cherry"];

// Example 1: Calls a function for each element in the array
fruits.forEach((currentValue, index, arr) => {
    console.log(`Element at index ${index}: ${currentValue}`);
});

// Example 2: Compute the sum of an array
const numbers = [65, 44, 12, 4];
let sum = 0;
numbers.forEach((item) => {
    sum += item;
});
console.log(`Sum of numbers: ${sum}`);

// Example 3: Multiply each element by 10
numbers.forEach((item, index, arr) => {
    arr[index] = item * 10;
});

/////////////////////////////////////////////////////////////////////

7/27/24

<!-- Editor keeps indenting lines below <button> by 4 instead of 2 -->
<!-- Editor keeps indenting lines below console.log() by 2 instead of 0 -->
<!-- Fix this by disabling Detect Indentation and set Editor Tab Size to 2-->

/////////////////////////////////////////////////////////////////////

OPERATOR PRECEDENCE
Certainly! JavaScript has 21 levels of operator precedence. Letâ€™s explore them:

1. Grouping (Parentheses): Highest precedence. Use parentheses to control evaluation order.

2. Exponentiation (**): Right-associative.

3. Unary Operators: Including +, -, !, typeof, etc.

4. Multiplication and Division (*, /, %): Left-associative.

5. Addition and Subtraction (+, -): Left-associative.

6. Bitwise Shifts (<<, >>, >>>): Left-associative.

7. Relational Operators (<, >, <=, >=, instanceof, in): Left-associative.

8. Equality Operators (==, !=, ===, !==): Left-associative.

9. Bitwise AND (&): Left-associative.

10. Bitwise XOR (^): Left-associative.

11. Bitwise OR (|): Left-associative.

12. Logical AND (&&): Left-associative.

13. Logical OR (||): Left-associative.

14. Conditional (Ternary) Operator (? :): Right-associative.

15. Assignment Operators (=, +=, -=): Right-associative.

16. Comma Operator (a, b): Left-associative (evaluates both operands).

17. Spread/Rest Operators (...)

18. Yield and yield*

19. Arrow Function (=>): Right-associative.

20. Template Literals (${})

/////////////////////////////////////////////////////////////////////

7/29/24

localStorage

Only supports strings

// Get a single string from localStorage
const message = localStorage.getItem('message');

// save a single string in localStorage
localStorage.setItem('message', "Hello");


// Get strings from localStorage and convert strings to object score
// If item does not exist in localStorage it returns a NULL
let score = JSON.parse(localStorage.getItem('score')) || {
  wins: 0,
  losses: 0,
  ties: 0
};

// convert object score to strings and save in localStorage
localStorage.setItem('score', JSON.stringify(score));

//To reset the score and remove stored data in localStorage
localStorage.removeItem('score');


/////////////////////////////////////////////////////////////////////
8/6/24

For Go Live to work the HTML file must be selected.
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
8/18/24

Link to completed Amazon project:

https://supersimple.dev/projects/amazon/

Startup code for Lesson 13:
https://github.com/SuperSimpleDev/javascript-amazon-project

Will watch the videos and make same changes to lesson13 code
Then copy all code to Lesson 14 folder and continue

/////////////////////////////////////////////////////////////////////

EilifGit24!
Don't have to type window.
lucidchart.com
get.otter.com

/////////////////////////////////////////////////////////////////////
8/19/24
/////////////////////////////////////////////////////////////////////

Syntax for a data attribute

-is an HTML attribute
-Must start with "data-"

console.log(button.dataset);
dataset contains all data attributes that have been set for an element