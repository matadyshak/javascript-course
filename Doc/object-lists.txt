To populate an array of objects where each object represents a word and its frequency in an array of words, you can follow these steps:

Initialize an empty object to keep track of word counts.
Iterate through the array of words, updating the counts in the object.
Convert the object to an array of objects where each object has a word property and a count property.
Here’s a step-by-step implementation:

// Sample array of words
const wordsArray = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple'];

// Step 1: Create an object to store word counts
const wordCounts = {};

// Step 2: Iterate through the words array and count occurrences
for (const word of wordsArray) {
  // If the word is already in the object, increment its count
  if (wordCounts[word]) {
    wordCounts[word]++;
  } else {
    // If the word is not in the object, initialize its count to 1
    wordCounts[word] = 1;
  }
}

// Step 3: Convert the wordCounts object to an array of objects
const resultArray = Object.keys(wordCounts).map(word => ({
  word: word,
  count: wordCounts[word]
}));

console.log(resultArray);


Explanation:
Counting Words:

We initialize an empty object wordCounts to keep track of each word’s occurrences.
As we loop through wordsArray, we check if the word already exists in wordCounts. If it does, we increment its count. If it doesn’t, we add it to wordCounts with a count of 1.
Transforming Object to Array:

Object.keys(wordCounts) gives us an array of the keys (words) from the wordCounts object.
We then use .map() to transform each key into an object with word and count properties, which we push into resultArray.
Example Output:
Given the input ['apple', 'banana', 'apple', 'orange', 'banana', 'apple'], the output will be:

[
  { word: 'apple', count: 3 },
  { word: 'banana', count: 2 },
  { word: 'orange', count: 1 }
]

This approach efficiently counts the occurrences and formats the result as required.
